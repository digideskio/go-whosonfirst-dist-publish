// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5d\x6f\xdc\x36\x10\x7c\xf6\xfd\x8a\xad\x1a\xa0\x09\x50\x49\x89\x8b\xb8\xb5\xa3\x13\x10\x38\x49\x63\xa0\x6d\x8a\xc6\x41\xdb\xa7\x62\x25\xae\x4e\xdb\x52\xa4\x42\xae\xee\xa2\xb8\xfe\xef\x05\xa9\xfb\x90\x3f\x52\xd8\x2f\x32\xc9\xd9\xd9\xe5\x72\x67\x70\xc5\x57\xaf\xde\x9d\x5f\xfe\xf9\xeb\x6b\x68\xa5\xd3\xe5\xa2\x08\x1f\xd0\x68\x56\xcb\x84\x4c\x52\x2e\x00\x8a\x96\x50\x85\x7f\x00\x0a\x61\xd1\x54\xfe\xde\xda\x6f\x3c\xbc\x33\xf0\x86\x9d\x17\xb8\xba\x82\xec\x72\xec\x09\xae\xaf\xe1\xc2\xac\xc9\x88\x75\x63\x91\x4f\xd8\x29\xae\x23\x41\x68\x45\xfa\x94\x3e\x0e\xbc\x5e\x26\xe7\xd6\x08\x19\x49\x43\x5c\x02\xf5\xb4\x5a\x26\x42\x9f\x24\x0f\x25\xbc\x80\xba\x45\xe7\x49\x96\x1f\x2e\xdf\xa4\x3f\x24\x73\x1e\x83\x1d\x2d\x13\x47\x0d\x39\x47\x6e\x16\x6d\x1d\xaf\xd8\x24\x5f\xca\xf9\x47\xfa\xe1\x65\x7a\x6e\xbb\x1e\x85\x2b\x3d\x4f\x7b\xf1\x7a\x79\x9a\x40\x7e\x37\x09\xf6\xbd\xa6\xb4\xb3\x15\x6b\x4a\x37\x54\xa5\xd8\xf7\x69\x8d\x3d\xde\x8c\x1f\xc9\x3f\x3c\xdc\x0b\xca\xe0\xd3\x0a\x5d\xea\x65\xbc\xc1\x53\x69\xac\xff\xb9\x97\xe9\x2d\x1a\xd5\x92\x56\x6f\x1c\x93\x51\x7a\x9c\xf7\xcc\x0d\x74\x6f\xcc\x9a\x69\xd3\x5b\x27\x33\xec\x86\x95\xb4\x4b\x45\x6b\xae\x29\x8d\x8b\x43\x64\x2c\x06\x64\xec\x69\xfb\x0e\xb5\xf7\xdb\x5e\x02\x54\x56\x8d\x70\xb5\x5d\x34\xd6\x48\xda\x60\xc7\x7a\x3c\x03\x8f\xc6\xa7\x9e\x1c\x37\x2f\xb6\xc7\x9a\x0d\xa5\x2d\xf1\xaa\x95\x33\x78\x96\x7d\x47\xdd\xee\xe4\x7a\xb1\x87\xec\xc9\x3a\x74\x2b\x36\x69\x65\x45\x6c\x17\xf0\xcf\xef\xc1\xd7\x56\xd1\xcd\xf4\x9b\x2d\xff\xf7\x4f\x9f\xbe\xd8\x83\xb4\x75\x67\xf0\xf5\xe9\xe9\xe9\x1d\x82\x4c\x91\x20\x6b\x7f\x3b\xad\xd8\xfe\x0c\xee\x4d\x99\xf9\x16\x8f\x9f\x9f\xec\x03\x76\xec\x27\x27\x27\x07\x6c\x6c\x5c\x1e\x3b\x17\xa5\x92\xef\xb4\x52\x84\x86\x95\x3b\xae\x20\xa2\xe3\x07\xca\xa6\x3d\x2e\x17\x8b\xa3\xa2\x2f\x2f\x5b\xf6\xd0\xb0\x26\xd8\xa0\x87\x02\xa1\x75\xd4\x2c\x93\x30\xd1\xfe\x2c\xcf\x57\x2c\xed\x50\x65\xb5\xed\xf2\x4d\x6b\xbd\x35\x4d\x60\xcd\x57\x36\x9d\x2d\x53\xc5\x5e\xd2\x7e\xa8\x34\xfb\x36\x29\x57\x64\xc8\xa1\x90\x82\x6a\x04\x67\x2b\x2b\xbe\xc8\xb1\x04\x6b\xa0\x88\x2d\xae\x35\x7a\xbf\x4c\x14\x0a\x25\x65\x28\xf0\x15\x4a\x28\xb0\xc8\xc3\x71\x99\xc1\x65\x4b\x8e\x80\x3d\xa0\xf6\x16\x10\x3a\xac\xdb\xf0\xdc\x8e\x50\x05\x51\xc0\x9a\x9c\x67\x6b\x00\xd7\xc8\x3a\xee\xa0\x1c\x8a\xe7\xdd\x3d\xb3\xbf\xbd\x35\x49\x79\x73\x1d\x6b\x41\x0f\x1b\xd2\x1a\xe6\x77\x46\xb1\x5d\xf6\xa9\xd3\x49\xf9\x52\x6c\x07\xcf\xb2\xa7\x13\xd4\xa8\x03\xc6\x79\x3f\x41\x7e\x7b\xff\x1e\x8e\xb7\x88\x86\x48\xf9\x0c\x5e\x7a\xb0\x0d\x48\x68\xe8\xc6\xb1\xb0\x59\x41\xf1\xb1\x44\x2d\x45\xfe\xb1\x84\xc7\xd6\x6d\x97\xe4\x0c\x0a\xaf\x29\x6c\x3f\x89\xbd\xf7\x80\x8e\xc0\x58\x01\x36\xb5\x1e\x14\x29\x60\x03\x68\xc6\x89\x90\x20\x34\xd8\x71\x35\x08\x5b\xe3\x33\xb8\x68\x60\xb4\x03\x18\x22\x05\xd2\xa2\x80\x42\xc1\xb8\xb5\x61\xad\xb7\xfb\x16\x6a\x6d\x0d\x01\x0b\x28\x76\x54\x8b\x1e\xa1\x71\xb6\x8b\x84\x0f\x7c\xe8\x34\x10\x27\xe5\xed\x9d\x78\xeb\x1f\x59\xde\x0e\x15\x58\xb7\x42\xc3\x9f\x31\x94\x96\x15\x79\x5f\x2e\x8e\x16\x47\xc5\xa0\xc3\x7c\x41\x18\x3f\x87\x66\x45\xf0\x88\xbf\x85\x47\x2c\x70\xb6\x84\xec\x42\xa8\xf3\x70\x7d\x1d\x00\xe1\x2f\x7c\x8b\x9d\x9f\x5c\x5d\x05\x5c\xf6\x0b\x76\x61\x24\x92\x32\xe4\x8a\x00\xcd\xc0\xea\xee\xf9\x44\x52\x78\x71\xd6\xac\xca\xfd\xbd\x66\xb0\x60\xc6\x8e\xbc\x27\x15\x03\xbe\x74\x12\x12\x05\x95\x45\x1e\x28\x7c\x87\x5a\xef\x46\x75\x52\xe9\x3e\xf6\x7d\x5c\xde\x8a\x8e\x01\x65\x51\xb9\xe0\x75\x53\x51\x8a\xd7\xfb\x61\x9f\x9c\x61\x57\x2f\x40\x14\xde\xfc\x5d\xa3\x7f\x22\x1b\x7f\x53\x25\xb5\x1d\x8c\xec\x33\x9f\x87\x15\xfc\x0b\xed\xd0\x85\xae\xd3\x5f\xb5\xed\x3a\x3c\x68\x07\x6e\xc9\xdf\x51\x6d\x9d\xf2\x71\x88\xf9\x16\xb3\xe7\xcf\x74\xb8\x12\x7f\x9e\xb7\x63\x96\xa1\x1a\x85\xfc\x2c\x43\x7d\x40\x45\x69\xfc\x2f\xe5\x1d\xa2\x03\xcf\x60\x0e\x4c\xd9\xbc\x6d\x00\x17\x12\xdd\xa8\x76\x14\x6d\xe4\x7e\xd7\x08\x29\x7e\x42\x2f\x3f\x5b\xc5\x0d\x6f\x1f\x61\xa2\x0e\x75\x3d\x8e\xba\x09\xba\x60\xf1\xa4\x9b\x27\x91\x52\xa3\x17\x18\x7a\x15\x79\xbf\x68\x48\x3b\xea\x0f\x11\x38\x73\xa6\xed\xbb\xe6\x8a\xd7\xc1\x7f\xc3\x58\xe6\x9a\x63\xdd\xdb\x69\x27\x13\x0a\x39\x38\x72\x1e\x94\x70\x14\x5d\x7b\x32\xeb\x22\x9f\x7e\x03\xfd\x17\x00\x00\xff\xff\xd3\x1d\x98\x9e\x14\x09\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 2324, mode: os.FileMode(436), modTime: time.Unix(1534345560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

