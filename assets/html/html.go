// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x61\x6f\xe3\x44\x10\xfd\x9c\xfc\x8a\xc1\x9c\x04\x48\xd8\x3e\x8a\xae\xd0\xd4\xb6\x84\x7a\x57\x51\x09\x38\x24\x52\x01\x1f\xc7\xde\x49\x3c\xb0\xde\x35\xbb\xe3\x84\x5c\x94\xff\x8e\xd6\x89\x9d\xa4\x4d\x51\x3f\x39\xe3\x7d\xef\xcd\xec\xcc\x3c\x27\xfb\xec\xfd\xc7\xbb\xf9\x9f\xbf\x7e\x80\x5a\x1a\x5d\x4c\xb3\xf0\x00\x8d\x66\x99\x47\x64\xa2\x62\x0a\x90\xd5\x84\x2a\xfc\x00\xc8\x84\x45\x53\xf1\x7b\x6d\xbf\xf0\xf0\xd1\xc0\x3d\x3b\x2f\xb0\xdd\x42\x32\xdf\xb4\x04\xbb\x1d\x3c\x98\x15\x19\xb1\x6e\x93\xa5\x7b\xec\x9e\xd7\x90\x20\xd4\x22\x6d\x4c\xff\x74\xbc\xca\xa3\x3b\x6b\x84\x8c\xc4\x81\x17\x41\xb5\x8f\xf2\x48\xe8\x5f\x49\x43\x09\xb7\x50\xd5\xe8\x3c\x49\xfe\x38\xbf\x8f\xbf\x8f\x4e\x75\x0c\x36\x94\x47\x8e\x16\xe4\x1c\xb9\x13\xb6\x75\xbc\x64\x13\xbd\x94\xf3\x8f\xf8\xf1\x87\xf8\xce\x36\x2d\x0a\x97\xfa\x34\xed\xc3\x87\xfc\x26\x82\xf4\x79\x12\x6c\x5b\x4d\x71\x63\x4b\xd6\x14\xaf\xa9\x8c\xb1\x6d\xe3\x0a\x5b\x3c\xe7\x6f\xc8\xbf\x9e\xee\x05\xa5\xf3\x71\x89\x2e\xf6\xb2\x39\xd3\x29\x35\x56\x7f\x5f\x54\xfa\x11\x8d\xaa\x49\xab\x7b\xc7\x64\x94\xde\x9c\xf6\xcc\x75\x74\x91\xb3\x62\x5a\xb7\xd6\xc9\x09\x76\xcd\x4a\xea\x5c\xd1\x8a\x2b\x8a\xfb\xe0\xc8\xec\x8b\x01\xd9\xb4\x74\x98\x43\xe5\xfd\xa1\x97\x00\xa5\x55\x1b\xd8\x1e\x82\x85\x35\x12\x2f\xb0\x61\xbd\x99\x81\x47\xe3\x63\x4f\x8e\x17\xb7\x87\x63\xcd\x86\xe2\x9a\x78\x59\xcb\x0c\xbe\x49\xbe\xa5\x66\x38\xd9\x4d\x47\xc8\x28\xd6\xa0\x5b\xb2\x89\x4b\x2b\x62\x9b\x80\x7f\x77\x01\x5f\x59\x45\xe7\xe9\xd7\x07\xfd\xef\xde\xbe\xbd\x1d\x41\xda\xba\x19\x7c\x7e\x73\x73\xf3\x4c\x20\x51\x24\xc8\xda\x3f\x4d\x2b\xb6\x9d\xc1\xc5\x94\x89\xaf\xf1\xea\xdd\xf5\x48\x18\xd4\xaf\xaf\xaf\x8f\xd8\xbe\x71\x69\xdf\xb9\xde\x2a\xe9\xe0\x95\x2c\x34\xac\x18\xb4\x82\x89\xae\x5e\x69\x9b\xfa\xaa\x98\x4e\x27\x3d\xa7\x2d\xe6\x35\x7b\x58\xb0\x26\x58\xa3\x87\x0c\xa1\x76\xb4\xc8\xa3\xb0\xd5\x7e\x96\xa6\x4b\x96\xba\x2b\x93\xca\x36\xe9\xba\xb6\xde\x9a\x45\x50\x4e\x97\x36\x3e\x09\x63\xc5\x5e\xe2\xb6\x2b\x35\xfb\x3a\x2a\x96\x64\xc8\xa1\x90\x82\x72\x03\xce\x96\x56\x7c\x96\x62\x01\xd6\x40\xd6\xb7\xb9\xd2\xe8\x7d\x1e\x29\x14\x8a\x8a\x50\xe4\x7b\x94\x50\x64\x96\x86\xe3\x22\x81\x79\x4d\x8e\x80\x3d\xa0\xf6\x16\x10\x1a\xac\xea\x30\x72\x47\xa8\x82\x31\x60\x45\xce\xb3\x35\x80\x2b\x64\xdd\xbf\x41\x39\x16\xcf\xc3\x5d\x93\xbf\xbc\x35\x51\x71\x1e\x87\x5a\x92\x2c\x6d\xc7\x26\x74\x7a\xf8\x09\xa1\x65\x0e\xcd\x92\xe0\x0d\x7f\x0d\x6f\x58\x60\x96\x43\xf2\x20\xd4\x78\xd8\xed\x06\xd0\xf0\xcc\x06\x1f\x6c\xb7\x01\x9b\xfc\x82\x4d\xb8\x46\x54\x84\x14\x23\x48\x33\xb0\x7a\x8e\x99\x4e\x26\x99\x17\x67\xcd\xb2\x18\x0b\x3f\xc1\x84\xaf\x88\x23\xef\x49\xf5\xe8\x97\x4e\x42\xa6\xb0\x1e\xbd\x0e\x64\xbe\x41\xad\x87\xfe\xee\xd7\x6b\xe4\xfe\xd6\x87\x4f\xd8\x3d\xa1\xc8\x4a\x17\x4c\x3a\x99\x64\x8a\x57\xe3\x78\xf6\xfb\xdc\x57\x0a\xd0\xef\x49\x98\xb3\xe3\xb2\x93\xd0\xfb\x60\x79\x64\xe3\xcf\x87\x5a\xd9\xce\xc8\x98\xf3\x2e\x44\xc7\xc9\xc2\x93\x05\x75\x54\x59\xa7\x3c\xa0\x51\x61\xda\x67\x42\x9e\x3f\xd1\xb1\x76\xfe\xf4\xf4\xde\x7b\xc1\xea\xf8\x32\x88\xfc\xbf\xc2\x09\xaf\x33\x47\x66\x32\x5e\x1f\xe0\x41\x7a\x1f\x54\x8e\xfa\x05\xbe\xbc\xaf\x41\xef\x27\xf4\xf2\xb3\x55\xbc\xe0\xb3\x7a\x42\x11\x5f\x4a\x4d\xa0\x50\x10\x58\x3c\xe9\xc5\x57\xbd\xa4\x46\x2f\xd0\xb5\xaa\xd7\x7d\xd1\x0a\x83\xf4\x63\x0f\x3c\xf1\x44\x18\x4e\xaa\x78\x15\xac\x3f\x6c\x56\xaa\xf9\x6c\x73\xc9\x84\x52\xc6\x2f\xc2\x01\x14\xd6\x3b\x3c\xf7\xdf\x8b\x2c\xdd\xff\x0d\xff\x17\x00\x00\xff\xff\x0f\x3b\x0a\x04\x97\x07\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 1943, mode: os.FileMode(436), modTime: time.Unix(1533651548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

