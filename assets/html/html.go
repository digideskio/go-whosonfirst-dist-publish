// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x61\x6f\xe3\x44\x10\xfd\xdc\xfc\x8a\xc1\x9c\x04\x48\xd8\x3e\x0e\x5d\xa1\xa9\x63\x09\xf5\xae\xa2\x12\x70\x48\xb4\x02\x3e\xa1\xb1\x77\x92\x1d\x58\xef\x9a\xdd\x71\x42\x5a\xfa\xdf\xd1\x3a\xb1\xe3\xb4\x29\xba\x4f\xf6\x64\xdf\xbc\x19\xbf\x99\xb7\x29\x3e\x79\xf7\xe1\xea\xf6\xf7\x9f\xdf\x83\x96\xc6\x94\xb3\x22\x3e\xc0\xa0\x5d\x2d\x12\xb2\x49\x39\x03\x28\x34\xa1\x8a\x2f\x00\x85\xb0\x18\x2a\x7f\xd5\xee\xb3\x00\x1f\x2c\x5c\xb3\x0f\x02\x0f\x0f\x90\xdd\x6e\x5b\x82\xc7\x47\xb8\xb1\x6b\xb2\xe2\xfc\xb6\xc8\x77\xd8\x5d\x5e\x43\x82\xa0\x45\xda\x94\xfe\xee\x78\xbd\x48\xae\x9c\x15\xb2\x92\xc6\xbc\x04\xea\x5d\xb4\x48\x84\xfe\x91\x3c\xb6\x70\x09\xb5\x46\x1f\x48\x16\x77\xb7\xd7\xe9\xb7\xc9\x94\xc7\x62\x43\x8b\xc4\xd3\x92\xbc\x27\x3f\xc9\x76\x9e\x57\x6c\x93\x97\x6a\xfe\x96\xde\x7d\x97\x5e\xb9\xa6\x45\xe1\xca\x4c\xcb\xde\xbc\x5f\x5c\x24\x90\x3f\x2f\x82\x6d\x6b\x28\x6d\x5c\xc5\x86\xd2\x0d\x55\x29\xb6\x6d\x5a\x63\x8b\xc7\xf9\x5b\x0a\x1f\x9f\x1e\x04\xa5\x0b\x69\x85\x3e\x0d\xb2\x3d\xe2\xa9\x0c\xd6\x7f\x9d\x64\xfa\x1e\xad\xd2\x64\xd4\xb5\x67\xb2\xca\x6c\xa7\x9a\xf9\x8e\x4e\xe6\xac\x99\x36\xad\xf3\x32\xc1\x6e\x58\x89\x5e\x28\x5a\x73\x4d\x69\x1f\x1c\x32\xfb\x66\x40\xb6\x2d\xed\xe7\x50\x87\xb0\xd7\x12\xa0\x72\x6a\x0b\x0f\xfb\x60\xe9\xac\xa4\x4b\x6c\xd8\x6c\xe7\x10\xd0\x86\x34\x90\xe7\xe5\xe5\xfe\xd8\xb0\xa5\x54\x13\xaf\xb4\xcc\xe1\xab\xec\x6b\x6a\x86\x93\xc7\xd9\x08\x19\xc9\x1a\xf4\x2b\xb6\x69\xe5\x44\x5c\x13\xf1\x6f\x4f\xe0\x6b\xa7\xe8\xb8\xfc\x66\xcf\xff\xcd\xeb\xd7\x97\x23\xc8\x38\x3f\x87\x4f\x2f\x2e\x2e\x9e\x11\x64\x8a\x04\xd9\x84\xa7\x65\xc5\xb5\x73\x38\x59\x32\x0b\x1a\xdf\xbc\x3d\x1f\x13\x06\xf6\xf3\xf3\xf3\x03\xb6\x17\x2e\xef\x95\xeb\xad\x92\x0f\x5e\x29\xa2\x60\xe5\xc0\x15\x4d\xf4\xe6\x23\x6d\xa3\xdf\x94\xb3\xd9\x59\x9f\xd3\x96\xb7\x9a\x03\x2c\xd9\x10\x6c\x30\x40\x81\xa0\x3d\x2d\x17\x49\xdc\xea\x30\xcf\xf3\x15\x8b\xee\xaa\xac\x76\x4d\xbe\xd1\x2e\x38\xbb\x8c\xcc\xf9\xca\xa5\x93\x30\x55\x1c\x24\x6d\xbb\xca\x70\xd0\x49\xb9\x22\x4b\x1e\x85\x14\x54\x5b\xf0\xae\x72\x12\x8a\x1c\x4b\x70\x16\x8a\x5e\xe6\xda\x60\x08\x8b\x44\xa1\x50\x52\xc6\x26\xdf\xa1\xc4\x26\x8b\x3c\x1e\x97\x19\xdc\x6a\xf2\x04\x1c\x00\x4d\x70\x80\xd0\x60\xad\xe3\xc8\x3d\xa1\x8a\xc6\x80\x35\xf9\xc0\xce\x02\xae\x91\x4d\xff\x0b\xca\xa1\x79\x1e\xbe\x35\xfb\x33\x38\x9b\x94\xc7\x71\xec\x25\x2b\xf2\x76\x14\xa1\x33\xc3\x2b\x44\xc9\x3c\xda\x15\xc1\x2b\xfe\x12\x5e\xb1\xc0\x7c\x01\xd9\x8d\x50\x13\xe0\xf1\x71\x00\x0d\xcf\x62\xf0\xc1\xc3\x43\xc4\x66\x3f\x61\x13\x3f\x23\x29\x63\x89\x11\x64\x18\x58\x3d\xc7\xcc\xce\xce\x8a\x20\xde\xd9\x55\x39\x36\x3e\xc1\xc4\x5b\xc4\x53\x08\xa4\x7a\xf4\x4b\x27\xb1\x52\x5c\x8f\x9e\x07\x8a\xd0\xa0\x31\x83\xbe\xbb\xf5\x1a\x73\x7f\xe9\xc3\x27\xd9\x7d\x42\x59\x54\x3e\x9a\xf4\xec\xac\x50\xbc\x1e\xc7\xb3\xdb\xe7\xbe\x53\x80\x7e\x4f\xe2\x9c\x3d\x57\x9d\x44\xed\xa3\xe5\x91\x6d\x38\x1e\x6a\xed\x3a\x2b\x63\xcd\xab\x18\xc1\xbf\xa0\xbb\x06\x2d\xdf\xd3\x1f\xb5\x6b\x1a\x3c\x8c\x1a\x9e\x6c\xac\xa7\xda\x79\x15\x00\xad\x8a\xe3\x3f\x62\x0e\x7c\x4f\x87\x8f\xe1\xfb\xa9\x10\x93\x0a\xd5\x56\x28\x4c\x2a\xd4\x07\x54\x64\xfd\x7f\xca\x67\x44\x07\x9e\xce\x1e\x98\xb2\x51\x30\x80\x1b\xe9\x9d\x53\x7b\xea\x57\xfe\xf4\x86\x47\xfe\x1f\x30\xc8\x8f\x4e\xf1\x92\xf7\xda\xef\x78\x63\x53\x9f\x8b\x26\x50\x28\x08\x2c\x81\xcc\xf2\x8b\x9e\xd2\x60\x10\xe8\x5a\xd5\xf3\xbe\x68\x9e\x81\xfa\xae\x07\x4e\x5c\x14\xc7\x99\x2b\x5e\xc7\xcb\x62\xd8\xc5\xdc\xf0\xd1\xae\x93\x8d\xad\x8c\x77\xc8\x1e\x14\x0d\x11\x9f\xbb\x1b\xa6\xc8\x77\x7f\xdc\xff\x05\x00\x00\xff\xff\x6a\x77\x52\x8d\xc9\x07\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 1993, mode: os.FileMode(436), modTime: time.Unix(1534166709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

