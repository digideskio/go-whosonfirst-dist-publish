// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x6d\x6f\xdc\x44\x10\xfe\x9c\xfc\x8a\xc1\x54\xa2\x95\xb0\xdd\x06\x35\x90\xab\xcf\x52\x95\xb6\x34\x12\x50\x44\x53\x01\x9f\xd0\xd8\x3b\x3e\x0f\xac\x77\xdd\xdd\xf1\x5d\xdd\x90\xff\x8e\x76\x7d\x2f\xce\x4b\x51\xf2\xc5\x99\xdd\x67\x9e\x99\x9d\x97\x47\x57\x7c\xf5\xea\xdd\xf9\xe5\x9f\xbf\xbe\x86\x56\x3a\x5d\x1e\x17\xe1\x03\x1a\xcd\x6a\x99\x90\x49\xca\x63\x80\xa2\x25\x54\xe1\x1f\x80\x42\x58\x34\x95\xbf\xb7\xf6\x1b\x0f\xef\x0c\xbc\x61\xe7\x05\xae\xae\x20\xbb\x1c\x7b\x82\xeb\x6b\xb8\x30\x6b\x32\x62\xdd\x58\xe4\x13\x76\xf2\xeb\x48\x10\x5a\x91\x3e\xa5\x8f\x03\xaf\x97\xc9\xb9\x35\x42\x46\xd2\xe0\x97\x40\x3d\x59\xcb\x44\xe8\x93\xe4\x21\x85\x17\x50\xb7\xe8\x3c\xc9\xf2\xc3\xe5\x9b\xf4\x87\x64\xce\x63\xb0\xa3\x65\xe2\xa8\x21\xe7\xc8\xcd\xbc\xad\xe3\x15\x9b\xe4\x4b\x31\xff\x48\x3f\xbc\x4c\xcf\x6d\xd7\xa3\x70\xa5\xe7\x61\x2f\x5e\x2f\xcf\x12\xc8\xef\x06\xc1\xbe\xd7\x94\x76\xb6\x62\x4d\xe9\x86\xaa\x14\xfb\x3e\xad\xb1\xc7\x9b\xfe\x23\xf9\x87\xbb\x7b\x41\x19\x7c\x5a\xa1\x4b\xbd\x8c\x37\x78\x2a\x8d\xf5\x3f\xf7\x32\xbd\x45\xa3\x5a\xd2\xea\x8d\x63\x32\x4a\x8f\xf3\x9a\xb9\x81\xee\xf5\x59\x33\x6d\x7a\xeb\x64\x86\xdd\xb0\x92\x76\xa9\x68\xcd\x35\xa5\xd1\x38\x78\xc6\x64\x40\xc6\x9e\xb6\x7d\xa8\xbd\xdf\xd6\x12\xa0\xb2\x6a\x84\xab\xad\xd1\x58\x23\x69\x83\x1d\xeb\x71\x01\x1e\x8d\x4f\x3d\x39\x6e\x5e\x6c\xaf\x35\x1b\x4a\x5b\xe2\x55\x2b\x0b\x78\x96\x7d\x47\xdd\xee\xe6\xfa\x78\x0f\xd9\x93\x75\xe8\x56\x6c\xd2\xca\x8a\xd8\x2e\xe0\x9f\xdf\x83\xaf\xad\xa2\x9b\xe1\x37\x5b\xfe\xef\x9f\x3e\x7d\xb1\x07\x69\xeb\x16\xf0\xf5\xd9\xd9\xd9\x1d\x82\x4c\x91\x20\x6b\x7f\x3b\xac\xd8\x7e\x01\xf7\x86\xcc\x7c\x8b\x27\xcf\x4f\xf7\x0e\x3b\xf6\xd3\xd3\xd3\x03\x36\x16\x2e\x8f\x95\x8b\xab\x92\xef\x76\xa5\x08\x05\x2b\x77\x5c\x61\x89\x4e\x1e\xb8\x36\xed\x49\x79\x7c\x7c\x54\xf4\xe5\x65\xcb\x1e\x1a\xd6\x04\x1b\xf4\x50\x20\xb4\x8e\x9a\x65\x12\x26\xda\x2f\xf2\x7c\xc5\xd2\x0e\x55\x56\xdb\x2e\xdf\xb4\xd6\x5b\xd3\x04\xd6\x7c\x65\xd3\x99\x99\x2a\xf6\x92\xf6\x43\xa5\xd9\xb7\x49\xb9\x22\x43\x0e\x85\x14\x54\x23\x38\x5b\x59\xf1\x45\x8e\x25\x58\x03\x45\x2c\x71\xad\xd1\xfb\x65\xa2\x50\x28\x29\x43\x82\xaf\x50\x42\x82\x45\x1e\xae\xcb\x0c\x2e\x5b\x72\x04\xec\x01\xb5\xb7\x80\xd0\x61\xdd\x86\x76\x3b\x42\x15\x96\x02\xd6\xe4\x3c\x5b\x03\xb8\x46\xd6\xf1\x04\xe5\x90\x3c\xef\xde\x99\xfd\xed\xad\x49\xca\x9b\x76\xcc\x05\x3d\x6c\x48\x6b\x98\xbf\x19\xc5\x76\xd9\xa7\x4e\x27\xe5\x4b\xb1\x1d\x3c\xcb\x9e\x4e\x50\xa3\x0e\x18\xe7\xfd\x04\xf9\xed\xfd\x7b\x38\xd9\x22\x1a\x22\xe5\xb3\x22\xef\xb7\x35\x7d\xe9\xc1\x36\x20\xa1\xb2\x1b\xc7\xc2\x66\x05\xc5\xc7\x12\xb5\x14\xf9\xc7\x12\x1e\x5b\xb7\x35\xc9\x19\x14\x5e\x53\x38\x7e\x12\x9b\xe0\x01\x1d\x81\xb1\x02\x6c\x6a\x3d\x28\x52\xc0\x06\xd0\x8c\x13\x21\x41\xa8\xb4\xe3\x6a\x10\xb6\xc6\x67\x70\xd1\xc0\x68\x07\x30\x44\x0a\xa4\x45\x01\x85\x82\xf1\x68\xc3\x5a\x6f\xcf\x2d\xd4\xda\x1a\x02\x16\x50\xec\xa8\x16\x3d\x42\xe3\x6c\x17\x09\x1f\xd8\xf1\x34\x10\x27\xe5\xed\x93\xf8\xfc\x1f\x59\xde\x0e\x15\x58\xb7\x42\xc3\x9f\x31\xa4\x36\x15\xe3\xe8\xf8\xa8\x18\x74\x28\x0a\x84\x39\x74\x68\x56\x04\x8f\xf8\x5b\x78\xc4\x02\x8b\x25\x64\x17\x42\x9d\x87\xeb\xeb\x00\x08\x7f\xe1\x5b\xec\x84\xe5\xea\x2a\xe0\xb2\x5f\xb0\x0b\xb3\x91\x94\x21\x56\x04\x68\x06\x56\x77\xef\x27\x92\xc2\x8b\xb3\x66\x55\xee\xdf\x35\x83\x05\x55\x76\xe4\x3d\xa9\xe8\xf0\xa5\x9b\x10\x28\xac\x5b\xe4\x81\xc2\x77\xa8\xf5\x6e\x66\xa7\x75\xdd\xfb\xbe\x8f\xe6\x2d\xef\xe8\x50\x16\x95\x0b\xa2\x37\x25\xa5\x78\xbd\x9f\xfa\x49\x22\x76\xf9\x02\xc4\x0d\x9c\xf7\x35\x0a\x29\xb2\xf1\x37\xd7\xa5\xb6\x83\x91\x7d\xe4\xf3\x60\xc1\xbf\xd0\x0e\x5d\xa8\x3a\xfd\x55\xdb\xae\xc3\xc3\x12\xc1\x2d\x1d\x70\x54\x5b\xa7\x7c\x9c\x66\xbe\xc5\xec\xf9\x33\x1d\x9e\xc4\x9f\xe7\xe5\x98\x45\xa8\x46\x21\x3f\x8b\x50\x1f\x50\x71\x47\xfe\x97\xf2\x0e\xd1\x81\x67\x30\x07\xa6\x6c\x5e\x36\x80\x0b\x89\xb2\x54\x3b\x8a\x7a\x72\xbf\x7c\x84\x10\x3f\xa1\x97\x9f\xad\xe2\x86\xb7\x4d\x98\xa8\x43\x5e\x8f\xe3\xde\x84\xbd\x60\xf1\xa4\x9b\x27\x91\x52\xa3\x17\x18\x7a\x15\x79\xbf\xa8\x4c\x3b\xea\x0f\x11\x38\x93\xa8\x6d\x5f\x73\xc5\xeb\x20\xc4\x61\x2c\x73\xcd\x31\xef\xed\xb4\x93\x09\x89\x1c\xa4\x39\x0f\x9b\x70\x14\xe5\x7b\x52\xed\x22\x9f\x7e\x0c\xfd\x17\x00\x00\xff\xff\x42\xb4\x43\x79\x1d\x09\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 2333, mode: os.FileMode(436), modTime: time.Unix(1534344947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

