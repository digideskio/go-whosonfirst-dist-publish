// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xef\x6f\xe3\x44\x10\xfd\xdc\xfc\x15\x83\x39\x09\x90\xb0\xdd\x2b\xba\x42\x53\xc7\xd2\xa9\x77\x15\x95\x80\x43\xb4\x15\xf0\x09\x8d\xbd\x93\x78\x61\xbd\x6b\x76\x26\xc9\xa5\xa5\xff\x3b\xda\x4d\xec\x38\xfd\x71\xba\x4f\xf6\x64\xdf\x7b\x33\x9e\x99\xb7\x4a\xf1\xc5\xbb\x0f\x17\x37\x7f\xfe\xfa\x1e\x1a\x69\x4d\x39\x29\xc2\x03\x0c\xda\xc5\x2c\x21\x9b\x94\x13\x80\xa2\x21\x54\xe1\x05\xa0\x10\x2d\x86\xca\xdf\x1b\xf7\x15\xc3\x07\x0b\x97\xda\xb3\xc0\xfd\x3d\x64\x37\x9b\x8e\xe0\xe1\x01\xae\xec\x8a\xac\x38\xbf\x29\xf2\x2d\x76\xcb\x6b\x49\x10\x1a\x91\x2e\xa5\x7f\x97\x7a\x35\x4b\x2e\x9c\x15\xb2\x92\x06\x5e\x02\xf5\x36\x9a\x25\x42\x1f\x25\x0f\x25\x9c\x43\xdd\xa0\x67\x92\xd9\xed\xcd\x65\xfa\x43\x32\xd6\xb1\xd8\xd2\x2c\xf1\x34\x27\xef\xc9\x8f\xd8\xce\xeb\x85\xb6\xc9\x4b\x39\xff\x48\x6f\xdf\xa6\x17\xae\xed\x50\x74\x65\xc6\x69\xaf\xde\xcf\xce\x12\xc8\x9f\x26\xc1\xae\x33\x94\xb6\xae\xd2\x86\xd2\x35\x55\x29\x76\x5d\x5a\x63\x87\x87\xfc\x0d\xf1\xe7\xd3\x59\x50\x96\x9c\x56\xe8\x53\x96\xcd\x81\x4e\x65\xb0\xfe\xe7\x59\xa5\x1f\xd1\xaa\x86\x8c\xba\xf4\x9a\xac\x32\x9b\x71\xcf\xfc\x92\x9e\xe5\xac\x34\xad\x3b\xe7\x65\x84\x5d\x6b\x25\xcd\x4c\xd1\x4a\xd7\x94\xc6\x60\xcf\x8c\xc5\x80\x6c\x3a\xda\xcd\xa1\x66\xde\xf5\x12\xa0\x72\x6a\x03\xf7\xbb\x60\xee\xac\xa4\x73\x6c\xb5\xd9\x4c\x81\xd1\x72\xca\xe4\xf5\xfc\x7c\x77\x6c\xb4\xa5\xb4\x21\xbd\x68\x64\x0a\xaf\xb3\xef\xa8\xed\x4f\x1e\x26\x03\x64\x10\x6b\xd1\x2f\xb4\x4d\x2b\x27\xe2\xda\x80\x7f\xf3\x0c\xbe\x76\x8a\x0e\xd3\xaf\x77\xfa\xdf\x1f\x1f\x9f\x0f\x20\xe3\xfc\x14\xbe\x3c\x3b\x3b\x7b\x22\x90\x29\x12\xd4\x86\x1f\xa7\x15\xd7\x4d\xe1\xd9\x94\x19\x37\x78\xf2\xe6\x74\x20\xf4\xea\xa7\xa7\xa7\x7b\x6c\x6c\x5c\x1e\x3b\x17\xad\x92\xf7\x5e\x29\x42\xc3\xca\x5e\x2b\x98\xe8\xe4\x33\x6d\xd3\x9c\x94\x93\xc9\x51\xe4\x74\xe5\x4d\xa3\x19\xe6\xda\x10\xac\x91\xa1\x40\x68\x3c\xcd\x67\x49\xd8\x6a\x9e\xe6\xf9\x42\x4b\xb3\xac\xb2\xda\xb5\xf9\xba\x71\xec\xec\x3c\x28\xe7\x0b\x97\x8e\xc2\x54\x69\x96\xb4\x5b\x56\x46\x73\x93\x94\x0b\xb2\xe4\x51\x48\x41\xb5\x01\xef\x2a\x27\x5c\xe4\x58\x82\xb3\x50\xc4\x36\xd7\x06\x99\x67\x89\x42\xa1\xa4\x0c\x45\xbe\x43\x09\x45\x16\x79\x38\x2e\x33\xb8\x69\xc8\x13\x68\x06\x34\xec\x00\xa1\xc5\xba\x09\x23\xf7\x84\x2a\x18\x03\x56\xe4\x59\x3b\x0b\xb8\x42\x6d\xe2\x2f\x28\xfb\xe2\x75\xff\xad\xd9\xdf\xec\x6c\x52\x1e\xc6\xb1\x16\x64\x58\x93\x31\x30\xfe\x66\x14\xd7\x66\x1f\x5b\x93\x94\x6f\xc5\xb5\xf0\x3a\x3b\xde\x42\xad\xda\x63\x3c\xf3\x16\xf2\xdb\xf5\x35\x9c\xec\x10\x73\x22\xc5\x59\x91\x77\x43\x5f\x97\xa6\x7f\x85\x30\x05\x8f\x76\x41\xf0\x4a\x7f\x0b\xaf\xb4\xc0\x74\x06\xd9\x95\x50\xcb\xf0\xf0\xd0\x83\xfa\x67\xd1\x5b\xeb\xfe\x3e\x60\xb3\x5f\xb0\x0d\x9d\x49\xca\x90\x68\x00\x19\x0d\x5a\x3d\xc5\x4c\x8e\x8e\x0a\x16\xef\xec\xa2\x1c\x0a\x1e\x61\xc2\xc5\xe4\x89\x99\x54\x44\xbf\x74\x12\x32\x85\x8d\x8b\x3a\x50\x70\x8b\xc6\xf4\x23\xdb\x6e\xec\xc0\xbd\x8e\xe1\x23\x76\x24\x94\x45\xe5\x83\xef\x8f\x8e\x0a\xa5\x57\xc3\xc4\xb7\x16\x89\x95\x02\xc4\xd5\x0b\xab\xe3\x75\xb5\x94\x30\xce\x70\x8b\xa0\xb6\x7c\xb8\x27\xb5\x5b\x5a\x19\x72\x5e\x84\x08\xfe\x83\x66\xd9\xa2\xd5\x77\xf4\x57\xed\xda\x16\xf7\xdb\x03\x8f\x4c\xe0\xa9\x76\x5e\x71\x1c\xa3\x7e\xa4\xcc\xfa\x8e\xf6\x1f\xa3\xef\xc6\x8d\x18\x65\xa8\x36\x42\x3c\xca\x50\xef\x51\x71\x39\x3e\x29\xf9\x44\x68\xaf\xb3\xb4\x7b\xa5\x6c\x68\x18\xc0\x95\x44\x33\xd6\x9e\xa2\x8b\x9e\x37\x4d\xd0\xff\x09\x59\x7e\x76\x4a\xcf\xf5\xae\xf7\x5b\xdd\x50\xd4\xd7\xd2\x10\x28\x14\x04\x2d\x4c\x66\xfe\x4d\x94\x34\xc8\x02\xcb\x4e\x45\xdd\x17\xfd\xd8\x4b\xdf\x46\xe0\xc8\x98\x61\x9c\xb9\xd2\xab\x70\xff\xf4\xbb\x98\x1b\x7d\xb0\xeb\x64\x43\x29\xc3\xb5\xb4\x03\x05\x43\x84\xe7\xf6\xd2\x2a\xf2\xed\x7f\x81\xff\x03\x00\x00\xff\xff\x58\x5f\x79\x1b\x1c\x08\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 2076, mode: os.FileMode(436), modTime: time.Unix(1534171788, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

