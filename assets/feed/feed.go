// Code generated by go-bindata.
// sources:
// templates/feed/atom_1.0.xml
// templates/feed/rss_2.0.xml
// DO NOT EDIT!

package feed

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFeedAtom_10Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5f\x6f\xd3\x3e\x14\x7d\xdf\xa7\xb8\xf2\x6f\xd2\x0f\x04\x8b\xd3\xc1\x80\x55\x69\x27\x18\x9a\x34\x89\x3f\x0f\x74\x42\xe2\x65\x72\x93\x9b\xc6\xc2\xb1\x23\xfb\x86\xb6\x0b\xfd\xee\xe8\x26\xe9\x9a\x75\xa0\x31\xf6\xb4\xba\xe7\xdc\x73\xae\xcf\x71\x9b\x06\x32\xcc\xb5\x45\x10\x39\x62\x76\xad\xc8\x95\xd7\xa3\x58\xc0\x66\x93\x9c\xad\x4a\x03\x3f\xd0\x07\xed\xec\x44\x8c\xa2\x58\x00\xda\xd4\x65\xda\x2e\x26\xe2\x6a\x76\x71\xf4\x46\x9c\x4d\x0f\x12\xe6\xc1\xaa\x34\x36\x4c\x44\x41\x54\x8d\xa5\x5c\x2e\x97\xd1\xf2\x45\xe4\xfc\x42\x1e\xc7\xf1\x89\x7c\x4b\xae\x14\x1d\x66\x5c\xfc\x0e\x35\x3a\x3d\x3d\x95\xab\x82\x4a\x23\xa6\x07\x00\x89\xce\xa6\x0c\x0a\x63\x29\x33\x1d\x28\x5a\x16\x2e\x38\x9b\x6b\x1f\xa8\xc5\x37\x0d\x44\xb3\x75\x85\x6c\x53\xea\xac\xe5\x90\x26\x83\xd3\xaf\x85\xfb\x3f\xc0\xe7\x1c\x2e\x18\x0c\x03\x20\xf0\x24\xaf\xe7\x35\x69\x67\x43\x22\x3b\x3c\x33\x8d\xb6\xdf\xa1\xf0\x98\x77\xd6\xfe\x46\x55\x0a\xf0\x68\x26\x42\x19\x42\x6f\x15\xa1\x80\x76\xde\x44\xf4\x06\x6c\x67\x40\x00\xad\x2b\x9c\x08\xc2\x15\xc9\x76\x3f\xf9\xcf\x92\x9c\x4d\xb4\x2a\x4d\x2f\x1d\xd0\xe4\x0f\xa8\xaa\xaa\x32\x3a\x55\xbc\x70\xcb\x7e\xb6\xba\x35\x50\x57\x99\x22\xcc\xa6\x2c\xf0\xae\xd6\x26\x7b\xaf\x08\xa3\x0b\xe7\x4b\x45\x20\x8e\xe3\xf8\xd5\x51\x3c\x3a\x8a\x8f\x67\xa3\x93\x71\xfc\x72\x1c\x9f\x7c\x8b\x5f\x8f\xe3\xae\x18\x72\x4b\xe6\x41\xaa\xa6\xc2\x79\xfe\x17\x20\xb1\xaa\xbc\x8d\xa0\xf7\x92\xc8\xf6\x90\xa1\x72\x87\x4d\x42\x3d\x6f\xad\x0f\xee\x47\xec\x31\x41\x07\x50\xb0\x50\x37\x48\x84\x1e\x5c\x0e\xca\x18\xa0\x02\xa1\x32\x2a\xc5\x10\x25\x72\x3b\xa5\x93\x07\x8e\xdb\x2b\xbb\x40\x38\xd4\xcf\xe1\x50\x13\x8c\x27\x10\x5d\x12\x96\x81\x0b\xd0\xfe\xb1\x38\x5a\xf2\xeb\xde\x72\x9b\xc4\x7e\x48\x8f\x8c\xe6\xbf\xa6\x61\xb5\xe8\x93\x2a\xf9\xe3\xbd\x6e\xc8\x5e\xab\xf3\xca\xe0\xbc\x8c\x66\xed\xfa\x7c\x9d\x83\x15\x1e\xd3\xfc\x3d\xd5\xed\x43\x00\x48\xaa\x7a\x6e\x74\x28\xba\x78\x59\xeb\x0f\xe1\x76\x69\xee\xd0\x1d\x7b\x50\x8d\x07\xb9\x83\x26\x00\x24\xa9\xb3\x84\x96\xee\x64\x3a\x2b\x74\xb8\xf3\xf4\x80\x51\x4a\xdb\x00\xbd\xff\x73\x57\x5b\x82\x9f\x50\xd4\xa5\xb2\xfa\x06\xaf\x53\x57\x96\x8a\x03\xdb\xeb\x83\xc7\xd4\xf9\x2c\x80\xb2\x19\x77\xa3\xa7\x7f\xd1\x37\x78\xee\xca\xca\x63\x08\x98\x0d\xe7\xcc\xd7\x84\x6d\xf0\xe9\xee\x6b\xe6\x0e\x88\xf7\xe0\x9b\x0d\xd4\x76\x87\x8f\xe0\x92\x60\xa9\x02\xa4\x1e\x79\xd1\x2d\xf7\x83\x0a\xf4\xd1\x65\x3a\xd7\x98\xb1\x02\x8f\x7d\xc2\xd5\xcc\x14\x29\xd0\xc4\x8f\xf3\x69\x4b\x34\x2a\x10\xf4\xd7\x04\xce\x0e\x07\x5c\xb5\xa7\xb0\xd9\x44\x89\xec\xaf\xae\x7b\x27\xb7\xfd\x6c\x1a\x40\xcb\x02\x07\x89\xe4\xdf\xd9\xe9\xee\xe0\x57\x00\x00\x00\xff\xff\x74\x06\x8a\x58\xba\x05\x00\x00")

func templatesFeedAtom_10XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedAtom_10Xml,
		"templates/feed/atom_1.0.xml",
	)
}

func templatesFeedAtom_10Xml() (*asset, error) {
	bytes, err := templatesFeedAtom_10XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/atom_1.0.xml", size: 1466, mode: os.FileMode(436), modTime: time.Unix(1533740304, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFeedRss_20Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x51\x6f\xd3\x30\x14\x85\xdf\xf7\x2b\x8e\xc2\x24\x40\x1a\x71\x56\x18\x62\x55\xda\x49\x0c\x4d\x1a\x62\xf0\xb0\x4e\x3c\x4e\x5e\x7c\xdb\x58\x24\x76\xe5\x7b\x43\xb6\x85\xfc\x77\xe4\x74\xb4\x59\xe1\x85\xb7\xb6\x3e\xe7\xbb\xbe\xe7\xd4\x5d\x07\x43\x4b\xeb\x08\xc9\x92\xc8\xdc\x06\xe6\xdb\x49\x96\xa0\xef\xf3\xb3\xfb\xba\xc2\x4f\x0a\x6c\xbd\x9b\x25\xc7\x69\x96\x80\x5c\xe1\x8d\x75\xab\x59\x72\xb3\xb8\x78\xf3\x21\x39\x9b\x1f\xe4\x81\x19\xf7\x75\xe5\x78\x5a\xce\x92\x52\x64\x3d\x55\xaa\x6d\xdb\xb4\x7d\x9b\xfa\xb0\x52\xc7\xa7\xa7\xa7\xea\xbe\x94\xba\x4a\x76\xb0\x49\x9a\x25\xf3\x03\x20\x2f\x4a\xed\x1c\x55\xf1\x33\x90\x8b\x95\x8a\xe6\xdf\x4b\xff\x92\xf1\xcd\xe1\xc2\x06\x16\x74\x1d\xd2\xc5\xc3\x9a\xd0\xf7\x30\x96\x25\xd8\xbb\x46\xac\x77\x9c\xab\x8d\x7e\xe3\xad\xac\xfb\x31\x8f\xe3\x79\xaa\x54\xd4\xa5\x6d\xe9\xd9\xbb\x65\x84\x0c\x37\x19\x81\x54\xae\x06\xfd\x93\x55\xb3\x7c\x6c\x6c\x65\x3e\x69\xa1\x79\x94\x6d\xbf\xa5\x17\x3e\xd4\x5a\x90\x5c\x79\x77\x84\x6c\x82\xcf\xda\x61\x92\x65\xef\x71\x7c\x32\xcd\xde\x4d\xb3\x13\x5c\x5d\x2f\x86\xb8\xd4\x73\xcc\x06\x6d\x88\x8b\x60\xd7\xf1\xbe\xfb\x7b\x59\x86\xc6\x4a\x3f\x92\x08\x51\x80\x5f\x42\x57\x15\xa4\x24\xac\x2b\x5d\x10\xa7\xb9\x1a\xbb\x07\x1e\x62\x1a\x41\xbb\x15\xe1\xd0\x1e\xe1\xd0\x0a\xa6\x33\xa4\x97\x42\x35\xc7\x7c\x00\x6c\xe6\x5a\xa1\xfa\x8f\xe5\xff\xa2\x79\xd1\x75\x91\x9b\x7e\xd5\x35\x6d\xd6\xda\x06\xb5\x6d\x68\x5f\x32\xea\x61\x6f\xe7\x45\x69\xf9\x59\x6b\x28\xbc\x13\x6d\x1d\xe3\x09\x72\xee\x1b\x27\xf8\x85\xb2\xa9\xb5\xb3\x8f\x74\x5b\xf8\xba\xd6\x71\x99\xbd\xbc\x02\x15\x3e\x18\x86\x76\x26\x66\xf7\x64\xbf\xb6\x8f\x74\xee\xeb\x75\x20\x66\x32\x63\xce\xdd\x83\xd0\x10\x4a\xb1\x3b\x8e\xde\x91\xf1\x2f\x79\xdf\xa3\x71\x3b\x7d\x8a\x4b\x41\xab\x19\x45\x20\x2d\xb4\xf5\x7e\xd1\x2c\x57\xde\xd8\xa5\x25\x13\x27\x44\xec\xab\xd8\x9c\xd1\xa2\x61\x85\xa9\x5a\xbe\x1e\x8c\xf1\x3f\x81\x66\x6d\x06\xb7\x77\x63\xc0\xcd\xf0\x2b\xfa\xfe\x5f\x45\xe7\x6a\xd7\x60\xd7\x81\x5c\x9c\x13\x1f\x8c\xda\xbe\x98\x5c\x05\xe6\xf9\xee\xf0\x77\x00\x00\x00\xff\xff\xa3\xb9\x1a\xa0\xca\x03\x00\x00")

func templatesFeedRss_20XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedRss_20Xml,
		"templates/feed/rss_2.0.xml",
	)
}

func templatesFeedRss_20Xml() (*asset, error) {
	bytes, err := templatesFeedRss_20XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/rss_2.0.xml", size: 970, mode: os.FileMode(436), modTime: time.Unix(1533740295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/feed/atom_1.0.xml": templatesFeedAtom_10Xml,
	"templates/feed/rss_2.0.xml": templatesFeedRss_20Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"feed": &bintree{nil, map[string]*bintree{
			"atom_1.0.xml": &bintree{templatesFeedAtom_10Xml, map[string]*bintree{}},
			"rss_2.0.xml": &bintree{templatesFeedRss_20Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

