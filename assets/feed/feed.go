// Code generated by go-bindata.
// sources:
// templates/feed/atom_1.0.xml
// templates/feed/rss_2.0.xml
// DO NOT EDIT!

package feed

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFeedAtom_10Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6b\xdb\x4a\x10\x7d\xcf\xaf\x18\x36\x81\x7b\x2f\xf7\x46\x2b\xe7\x36\x6d\x63\x24\x87\x36\x25\x10\xe8\xc7\x43\x1d\x0a\x7d\x09\x6b\x69\x64\x2d\xdd\x0f\xb1\x3b\xaa\xed\xa8\xfe\xef\x65\x57\x4a\xac\x38\x81\x36\xf5\x93\x59\x9f\x33\xe7\xcc\x9c\x19\x77\x1d\x94\x58\x49\x83\xc0\x2a\xc4\xf2\x46\x90\xd5\x37\x93\x94\xc1\x76\x9b\x9d\xaf\xb5\x82\xef\xe8\xbc\xb4\x26\x67\x93\x24\x65\x80\xa6\xb0\xa5\x34\xcb\x9c\x5d\xcf\x2f\x8f\x5f\xb3\xf3\xd9\x41\x16\x78\xb0\xd6\xca\xf8\x9c\xd5\x44\xcd\x94\xf3\xd5\x6a\x95\xac\xfe\x4f\xac\x5b\xf2\x93\x34\x3d\xe5\x6f\xc8\x6a\xd6\x63\xa6\xf5\x53\xa8\xc9\xd9\xd9\x19\x5f\xd7\xa4\x15\x9b\x1d\x00\x64\xb2\x9c\x05\x90\x9f\x72\x5e\x4a\x4f\xc9\xaa\xb6\xde\x9a\x4a\x3a\x4f\x11\xdf\x75\x90\xcc\x37\x0d\x06\x9b\x5c\x96\x91\x43\x92\x14\xce\xbe\xd4\xf6\x2f\x0f\x9f\x2a\xb8\x0c\x60\x18\x01\x21\x54\x72\x72\xd1\x92\xb4\xc6\x67\xbc\xc7\x07\xa6\x92\xe6\x1b\xd4\x0e\xab\xde\xda\xef\xa8\x72\x06\x0e\x55\xce\x84\x22\x74\x46\x10\x32\x88\xf5\x72\x36\x18\x30\xbd\x01\x06\xb4\x69\x30\x67\x84\x6b\xe2\xb1\x3f\xfe\xc7\x92\x21\x9b\x64\xad\xd5\x20\xed\x51\x55\xbf\x50\x15\x4d\xa3\x64\x21\x42\xc3\x91\xfd\xef\xfa\xde\x40\xdb\x94\x82\xb0\x9c\x05\x81\xb7\xad\x54\xe5\x3b\x41\x98\x5c\x5a\xa7\x05\x01\x3b\x49\xd3\x97\xc7\xe9\xe4\x38\x3d\x99\x4f\x4e\xa7\xe9\x8b\x69\x7a\xfa\x35\x7d\x35\x4d\xfb\xc5\xe0\x77\xe4\x50\x48\xb4\x54\x5b\x17\xbe\x02\x64\x46\xe8\xfb\x08\x06\x2f\x19\x8f\x8f\x01\xca\x77\xd8\xcc\xb7\x8b\x68\x7d\x34\x1f\xb6\xc7\x04\xe9\x41\xc0\x52\xdc\x22\x11\x3a\xb0\x15\x08\xa5\x80\x6a\x84\x46\x89\x02\x7d\x92\xf1\xbb\x2a\xbd\x3c\x84\xb8\x9d\x30\x4b\x84\x23\xf9\x1f\x1c\x49\x82\x69\x0e\xc9\x15\xa1\xf6\x61\x01\xe2\x27\x88\xa3\x21\xb7\x19\x2c\xc7\x24\xf6\x43\x7a\x66\x34\x87\x5d\x17\xd4\x92\x8f\x42\xe3\x85\xd5\x8d\x43\xef\xb1\x84\xed\xf6\xd1\x96\xf0\x41\xb5\x77\x3d\xa2\xc5\xb9\x8e\x7a\x79\xce\x09\x1c\xee\xd7\xe9\x2f\x02\x20\x6b\xda\x85\x92\xbe\xee\x73\x0e\x90\xf7\xc2\xd3\x07\x5b\xca\x4a\x46\x7f\x19\xdf\x21\x7a\xc6\x68\x2f\xee\xf0\xd7\xf1\x69\x3f\x78\x80\xac\xb0\x86\xd0\xd0\x83\x08\xe7\xb5\xf4\x0f\x2e\x0d\x02\x4a\x48\xe3\x61\x28\x79\x61\x5b\x43\xf0\x03\xea\x56\x0b\x23\x6f\xf1\xa6\xb0\x5a\x8b\x90\xcf\x5e\xfc\x0e\x0b\xeb\x4a\x0f\xc2\x94\x61\x15\x06\xfa\x67\x79\x3b\x9e\xf1\xa8\xce\x62\x43\x18\x73\x2e\x76\x3f\x07\xee\x88\xf8\x08\xbe\xdd\x42\x6b\x76\xf8\x04\xae\x08\x56\xc2\x43\xe1\x30\x34\x0a\x4f\x8f\x2d\x96\xfd\x3b\x6c\x62\x29\x48\x80\xa4\x70\x8b\xff\x44\xa2\x12\x9e\x60\x18\x13\x58\x03\x4f\xcd\x31\xc9\xf8\x30\xba\xfe\x2c\xee\xd7\xb1\xeb\x00\x4d\x10\x38\xc8\x78\xf8\x5b\x9d\xed\x1e\x7e\x06\x00\x00\xff\xff\x20\x4a\x3b\x30\xa9\x05\x00\x00")

func templatesFeedAtom_10XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedAtom_10Xml,
		"templates/feed/atom_1.0.xml",
	)
}

func templatesFeedAtom_10Xml() (*asset, error) {
	bytes, err := templatesFeedAtom_10XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/atom_1.0.xml", size: 1449, mode: os.FileMode(436), modTime: time.Unix(1534170784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFeedRss_20Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x51\x6f\xd3\x30\x14\x85\xdf\xf7\x2b\x8e\xc2\x24\x40\x1a\x71\x56\x18\x62\x55\xda\x49\x0c\x4d\x1a\x62\xf0\xb0\x4e\x3c\x4e\x5e\x7c\xdb\x58\x24\x76\xe5\x7b\x43\xb6\x85\xfc\x77\xe4\x74\xb4\x59\xe1\x85\xb7\x24\x3e\xe7\xb3\xef\x39\x71\xd7\xc1\xd0\xd2\x3a\x42\xb2\x24\x32\xb7\x81\xf9\x76\x92\x25\xe8\xfb\xfc\xec\xbe\xae\xf0\x93\x02\x5b\xef\x66\xc9\x71\x9a\x25\x20\x57\x78\x63\xdd\x6a\x96\xdc\x2c\x2e\xde\x7c\x48\xce\xe6\x07\x79\x60\xc6\x7d\x5d\x39\x9e\x96\xb3\xa4\x14\x59\x4f\x95\x6a\xdb\x36\x6d\xdf\xa6\x3e\xac\xd4\xf1\xe9\xe9\xa9\xba\x2f\xa5\xae\x92\x1d\x6c\x92\x66\xc9\xfc\x00\xc8\x8b\x52\x3b\x47\x55\x7c\x06\x72\xb1\x52\xd1\xfc\x7b\xe9\x5f\x32\xbe\x39\x5c\xd8\xc0\x82\xae\x43\xba\x78\x58\x13\xfa\x1e\xc6\xb2\x04\x7b\xd7\x88\xf5\x8e\x73\xb5\xd1\x6f\xbc\x95\x75\x3f\xe6\x71\x7b\x9e\x2a\x15\x75\x69\x5b\x7a\xf6\x6e\x19\x21\xc3\x49\x46\x20\x95\xab\x41\xff\x64\xd5\x2c\x1f\x1b\x5b\x99\x4f\x5a\x68\x1e\x65\xdb\xb7\xf4\xc2\x87\x5a\x0b\x92\x2b\xef\x8e\x90\x4d\xf0\x59\x3b\x4c\xb2\xec\x3d\x8e\x4f\xa6\xd9\xbb\x69\x76\x82\xab\xeb\xc5\x10\x97\x7a\x8e\xd9\xa0\x0d\x71\x11\xec\x3a\x9e\x77\x7f\x2e\xcb\xd0\x58\xe9\x47\x12\x21\x0a\xf0\x4b\xe8\xaa\x82\x94\x84\x75\xa5\x0b\xe2\x34\x57\x63\xf7\xc0\x43\x4c\x23\x68\xb7\x22\x1c\xda\x23\x1c\x5a\xc1\x74\x86\xf4\x52\xa8\xe6\x98\x0f\x80\xcd\xbe\x56\xa8\xfe\x63\xf9\xbf\x68\x5e\x74\x5d\xe4\xa6\x5f\x75\x4d\xe7\xbe\x5e\x07\x62\x26\xb3\x19\x70\x1b\xd9\xb6\xab\x91\x78\x90\x8c\x1a\xd9\x9b\x7e\x51\x5a\x7e\xd6\x1f\x0a\xef\x44\x5b\xc7\x78\x82\x9c\xfb\xc6\x09\x7e\xa1\x6c\x6a\xed\xec\x23\xdd\x16\xbe\xae\x75\x1c\x6b\x2f\xb9\x40\x85\x0f\x86\xa1\x9d\x89\x29\x3e\xd9\xaf\xed\xe3\xf8\xc0\x23\xce\xdd\x83\xd0\x10\x4f\xb1\x5b\x8e\xde\x91\xf1\x2f\x79\xdf\xa3\x71\x3b\x7d\x8a\x4b\x41\xab\x19\x45\x20\x2d\xb4\xf5\x7e\xd1\x2c\x57\xde\xd8\xa5\x1d\x32\x1a\xb0\xaf\x62\x87\x46\x8b\x86\x15\xa6\x6a\xf9\x7a\x30\xc6\xbf\x03\xcd\xda\x0c\x6e\xef\xc6\x80\x9b\xe1\x2b\xfa\xfe\x5f\x95\xe7\x6a\xd7\x65\xd7\x81\x5c\xdc\x27\x5e\x1d\xb5\xbd\x3b\xb9\x0a\xcc\xf3\xdd\xe2\xef\x00\x00\x00\xff\xff\x53\x12\x93\x16\xd4\x03\x00\x00")

func templatesFeedRss_20XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedRss_20Xml,
		"templates/feed/rss_2.0.xml",
	)
}

func templatesFeedRss_20Xml() (*asset, error) {
	bytes, err := templatesFeedRss_20XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/rss_2.0.xml", size: 980, mode: os.FileMode(436), modTime: time.Unix(1534170647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/feed/atom_1.0.xml": templatesFeedAtom_10Xml,
	"templates/feed/rss_2.0.xml": templatesFeedRss_20Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"feed": &bintree{nil, map[string]*bintree{
			"atom_1.0.xml": &bintree{templatesFeedAtom_10Xml, map[string]*bintree{}},
			"rss_2.0.xml": &bintree{templatesFeedRss_20Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

