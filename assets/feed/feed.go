// Code generated by go-bindata.
// sources:
// templates/feed/atom_1.0.xml
// templates/feed/rss_2.0.xml
// DO NOT EDIT!

package feed

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFeedAtom_10Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x61\x6f\xe3\x44\x10\xfd\xcc\xfd\x8a\x27\x53\x89\x3b\x41\xbd\x6e\xa1\x87\x1a\x39\x91\x8e\x43\x07\x95\xe0\xf8\x40\x11\x12\x5f\xaa\x8d\x77\x1c\xaf\x58\xef\x5a\xbb\x63\x92\x34\xe4\xbf\xa3\x5d\x3b\x8d\x9b\x2b\x6a\x75\xf9\x14\xcf\xbe\x99\xd9\x99\xf7\x9e\xbd\xdb\x41\x51\xad\x2d\x21\xab\x89\xd4\x9d\x64\xd7\xde\x5d\x14\x19\xf6\xfb\x57\x65\x8c\x60\xd3\x1a\x1b\xe6\x59\xc3\xdc\xcd\x84\x58\xaf\xd7\xf9\xfa\xdb\xdc\xf9\x95\xb8\x2c\x8a\x2b\xf1\x8e\x5d\x9b\x0d\x98\x59\xf3\x14\xea\xe2\xfa\xfa\x5a\x6c\x1a\x6e\x4d\xb6\x78\x05\x94\x5a\x2d\x22\x28\xcc\x84\x50\x3a\x70\xbe\x6e\x5c\x70\xb6\xd6\x3e\x70\xc2\xef\x76\xc8\x6f\xb7\x1d\x61\xbf\x2f\x85\x56\x29\x87\x35\x1b\x5a\xfc\xd9\xb8\xaf\x02\x7e\xb3\xf8\x10\xc1\x98\x00\x11\x2b\x79\xbd\xec\x59\x3b\x1b\x4a\x31\xe0\x63\xa6\xd1\xf6\x6f\x34\x9e\xea\xe1\x6a\x2f\xe9\x2a\x32\x78\x32\xf3\x4c\x1a\x26\x6f\x25\x53\x86\x54\x6f\x9e\x3d\xbe\x40\x06\xde\x76\x34\xcf\x98\x36\x2c\xd2\x7c\xe2\xb3\x5b\xc6\xad\xe7\x9b\xd6\x8c\xad\x03\x99\xfa\x99\xae\xb2\xeb\x8c\xae\x64\x1c\x38\x65\x7f\xbd\x79\xb8\x40\xdf\x29\xc9\xa4\x16\xb1\xc1\x0f\xbd\x36\xea\x47\xc9\x94\x7f\x70\xbe\x95\x8c\xec\xb2\x28\xde\x9e\x17\x17\xe7\xc5\xe5\xed\xc5\xd5\xac\xf8\x6e\x56\x5c\xfd\x55\x7c\x3f\x2b\x12\xe5\xa5\x38\x24\xc7\x42\xb2\xe7\xc6\xf9\xf8\x17\x28\xad\x6c\x4f\x29\x28\x45\x0a\x46\xa8\x38\x62\xcb\xd0\x2f\xd3\xd5\x27\xfb\xc9\x4e\xc9\xd3\x01\x12\x2b\x79\x4f\xcc\xe4\xe1\x6a\x48\x63\xc0\x0d\xa1\x33\xb2\xa2\x90\xe3\xa3\x63\x9a\xe1\x5d\x88\x67\xdc\xe8\x80\xb5\xd7\xac\xed\x0a\x91\x97\x0c\xaf\x9d\xc7\x03\x43\xfa\x1f\xca\xde\xa0\xd6\x86\x02\xa4\x27\x58\xc7\xd0\xb6\x32\xbd\x22\x05\x6d\x21\xed\x76\x28\x43\x8f\x85\x92\xe3\xa6\xc6\xd6\xf5\xb0\x51\xe7\xdc\x48\x86\x92\x2c\x53\x68\xad\x8d\x19\xe3\x0e\x95\x71\x96\xa0\x19\x4a\x7b\xaa\xd8\x6c\x51\x7b\xd7\xa6\x82\x07\x8a\x57\x9a\x9b\x7e\x99\x57\xae\x15\x13\xa2\xcf\x53\xbd\x9f\x34\xff\xdc\x2f\xe1\xfc\x4a\x5a\x7d\x9f\x38\xcb\x4b\x71\x58\xd3\xb0\x5f\x44\x3d\x7b\x69\x57\x84\x33\xfd\x0d\xce\x34\x63\x36\x47\x7e\xc3\xd4\x86\xa8\xf0\xf4\x1b\x91\x25\x59\xf6\xdb\x91\x97\x17\xf8\xe9\xec\x41\x67\xf1\x41\x73\xfe\x51\xb6\xf4\xde\xb5\x9d\xa7\x10\x48\x61\xbf\xff\x72\x3c\xf8\xbd\x91\x97\x57\x6f\x1f\x1d\x25\x13\x7e\x31\xf4\x4a\xd2\x3e\x55\xfd\x0b\xb5\xfe\xfc\x25\x3e\xf1\x9d\x18\x47\x1c\xd6\xf4\x7f\x69\x13\xbb\x03\x65\xd7\x2f\x8d\x0e\xcd\x20\xff\x88\xff\x45\x06\xfe\xd5\x29\x5d\xeb\x11\x7d\x44\x0c\x19\x13\xbb\x1c\xf0\x7f\xa4\xd0\xa9\x1f\x80\xb2\x72\x96\xc9\xf2\x23\x65\xdf\x46\x75\x4e\x75\x85\x88\x92\xda\x06\x8c\x25\xdf\xbb\xde\x32\xfe\x45\xd3\xb7\x51\x00\x74\x57\xb9\xb6\x95\x91\xd5\x13\x57\x78\xaa\x9c\x57\x01\xd2\xaa\xe8\x90\x03\x29\xfa\x7e\x3a\xf1\xa4\xce\x72\xcb\x94\xd4\x51\x1d\x8f\x63\xee\x24\xf1\x13\xf8\x7e\x8f\xde\x1e\xf1\x39\x6e\x18\x6b\x19\x50\x79\x8a\x83\xe2\xe9\xb5\xa5\xb2\xaf\x93\x83\xa2\xa2\x35\xc7\x57\xd4\x9b\x94\x68\x64\x60\x8c\x6b\x82\xb3\x78\x6a\x8f\x79\x29\xc6\xd5\x0d\x6f\x8b\x07\x01\xef\x76\x20\xab\xd2\xc7\x46\xc4\xaf\xcd\xe2\x18\xf8\x2f\x00\x00\xff\xff\x65\x62\x2f\xd4\x9a\x06\x00\x00")

func templatesFeedAtom_10XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedAtom_10Xml,
		"templates/feed/atom_1.0.xml",
	)
}

func templatesFeedAtom_10Xml() (*asset, error) {
	bytes, err := templatesFeedAtom_10XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/atom_1.0.xml", size: 1690, mode: os.FileMode(436), modTime: time.Unix(1534345584, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFeedRss_20Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\xec\x34\x10\x7d\xe6\xfe\x8a\xa3\x50\x89\x7b\xa5\x4b\xbc\x5d\x68\xa5\xae\xd2\x95\xa0\xa8\x50\x44\xcb\x43\x8b\x78\xac\xbc\xf1\x64\x33\xc2\xb1\x57\xf6\xa4\xe9\x76\xc9\x7f\x47\xce\x7e\xa5\x05\xd4\xfb\x16\x7b\xce\x39\xe3\x9c\x39\xf6\x66\x03\x43\x15\x3b\x42\x56\x11\x99\xc7\x10\xe3\xe3\x74\x92\xa1\xef\x3f\x14\x21\x46\x3c\x37\xd6\xc5\x59\x7d\x99\xd5\x22\xab\x99\x52\x5d\xd7\xe5\xdd\x77\xb9\x0f\x4b\x75\x7a\x71\x71\xa1\x9e\x6b\x69\x6c\x86\x27\x0a\x91\xbd\xbb\xcc\xa6\xf9\x24\x9b\x7f\x00\x8a\xb2\xd6\xce\x91\x4d\xdf\x40\x21\x2c\x96\xe6\x7f\xd6\xfe\x9b\x88\xdf\x1d\xae\x39\x44\xc1\x66\x83\xfc\x61\xbd\x22\xf4\x3d\x0c\x47\x09\xbc\x68\x85\xbd\x8b\x85\xda\xe2\xb7\x5c\xcb\xee\xaf\x79\x6a\x1f\x67\x4a\x25\x5c\xde\xd5\x3e\x7a\x57\x25\x91\xe1\x24\x23\x21\x55\xa8\x01\xbf\xa3\xea\x28\x3f\xb6\x6c\xcd\x4f\x5a\x68\x9e\x60\x87\x55\x7e\xed\x43\xa3\x05\xd9\xad\x77\x9f\x31\x99\xe2\x57\xed\x30\x9d\x4c\xce\x71\x7a\x36\x9b\x7c\x3f\x9b\x9c\xe1\xf6\xfe\x21\x19\x51\xa8\xd7\x32\x5b\x69\x43\xb1\x0c\xbc\x4a\xe7\x7d\xfb\x5f\x1c\xa1\xb1\xd4\x2f\x24\x42\x14\xe0\x2b\x68\x6b\x21\x35\x61\x65\x75\x49\x31\xc7\x9d\x17\x9a\xe1\x87\x98\x6a\x52\x73\x44\x17\x58\xd8\x2d\x91\x69\x2b\x19\x3e\xfa\x30\x7c\x51\x70\x5a\xf8\x89\xb2\x4f\xa8\xd8\x52\x84\x0e\x04\xe7\x05\xec\x4a\xdb\x1a\x32\x60\x07\xed\xd6\x5b\x19\x7a\x6d\x62\x8e\x9b\x0a\x6b\xdf\xc2\x11\x19\x48\xad\x05\x46\x8b\x1e\xb6\x3a\xb6\x76\xb7\xef\x51\x5a\xef\x08\x2c\x30\x1c\xa8\x14\xbb\x46\x15\x7c\x33\x08\xee\x5d\x5f\xb2\xd4\xed\x22\x2f\x7d\xa3\x46\xde\x7f\x3b\xe8\xfd\xcc\xf2\x4b\xbb\x80\x0f\x4b\xed\xf8\x45\xa7\xde\x79\xa1\xc6\xf6\x0c\x86\x21\x8d\x3b\x68\xb7\x24\x9c\xf0\x67\x9c\xb0\x60\x76\x89\xfc\x46\xa8\x89\x29\x00\x00\x76\xb8\x82\x85\x9a\x3d\xa9\x58\xb6\x6c\xde\x9d\xfe\xc9\x61\xfc\x69\xc1\x92\xdf\xe9\x86\xae\x7c\xb3\x0a\x14\x23\x19\xf4\xfd\xd7\xbb\xc2\x7d\xad\xa7\x67\xe7\xaf\x4a\x85\x1a\x7a\x6c\xfb\x7d\xb5\xef\xfb\x45\xa9\x7b\xbf\xef\x38\x8e\x87\x7b\xf0\xff\xe0\x51\xee\xdf\x64\xec\x21\xc5\x64\x3c\x60\x94\xde\x89\x66\x17\xb1\x93\xbb\xf2\xad\x13\xfc\x8d\xba\x6d\xd2\x24\xe8\xb1\xf4\x4d\xa3\x93\xb7\x6f\xf2\x19\xa8\xf4\xc1\x44\x68\x67\x52\x56\xf7\xce\xf0\xcb\xf8\x34\x23\x9d\xc5\x5a\x68\x98\x51\x79\x2c\x27\xee\x88\xf8\x2f\x78\xdf\xa3\x75\x47\x7c\x8e\x1b\x41\xa7\x23\xca\x40\x5a\xe8\xc0\xfd\x4d\x47\xb9\xf5\x86\x2b\x1e\x0c\x18\x64\x3f\x0e\x51\x4e\xd1\x62\x89\x64\xab\x4f\x03\x31\xdd\x41\xb4\x2b\x33\xb0\xbd\x1b\x0b\xfc\x31\xec\xa2\xef\xff\x2b\x77\x85\x3a\xc6\x69\xb3\x01\xb9\xd4\x27\x3d\x50\xea\xf0\x42\x15\x2a\xc4\x38\x3f\x16\xff\x09\x00\x00\xff\xff\xfa\xbd\xe0\x5a\x14\x05\x00\x00")

func templatesFeedRss_20XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedRss_20Xml,
		"templates/feed/rss_2.0.xml",
	)
}

func templatesFeedRss_20Xml() (*asset, error) {
	bytes, err := templatesFeedRss_20XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/rss_2.0.xml", size: 1300, mode: os.FileMode(436), modTime: time.Unix(1534345591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/feed/atom_1.0.xml": templatesFeedAtom_10Xml,
	"templates/feed/rss_2.0.xml": templatesFeedRss_20Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"feed": &bintree{nil, map[string]*bintree{
			"atom_1.0.xml": &bintree{templatesFeedAtom_10Xml, map[string]*bintree{}},
			"rss_2.0.xml": &bintree{templatesFeedRss_20Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

