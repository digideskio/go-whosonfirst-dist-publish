// Code generated by go-bindata.
// sources:
// templates/feed/atom_1.0.xml
// templates/feed/rss_2.0.xml
// DO NOT EDIT!

package feed

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFeedAtom_10Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6b\xdb\x4a\x10\x7d\xbe\xf9\x15\x83\x6e\xe0\xde\xcb\x6d\xb4\xb2\x5b\xa7\x44\xc8\x86\x36\x25\x10\xe8\xc7\x43\x53\x0a\x7d\x09\x6b\xed\x28\x5a\xba\x1f\x62\x77\x84\xed\xb8\xfa\xef\x65\x57\xb2\xad\x38\x81\x84\xe6\x29\xde\x3d\x67\xe6\xcc\x99\xb3\xda\x6e\x41\x60\x25\x0d\x42\x52\x21\x8a\x5b\x4e\x56\xdf\x4e\xb2\x04\xba\xee\xa4\x08\x27\xb0\xd6\xca\xf8\x79\x52\x13\x35\x39\x63\xab\xd5\x2a\x5d\xbd\x4e\xad\xbb\x63\xd3\x2c\x9b\xb1\x77\x64\x75\xd2\x63\xf2\xfa\x29\xd4\xe4\xe2\xe2\x82\xad\x6b\xd2\x2a\x59\x9c\x00\x14\x52\x2c\x02\xc8\xe7\x8c\x09\xe9\x29\x5d\xd5\xd6\x5b\x53\x49\xe7\x29\xe2\xb7\x5b\x48\x6f\x36\x0d\x42\xd7\x15\x4c\x8a\xc8\x21\x49\x0a\x17\xdf\x6b\xfb\x8f\x87\x2f\x15\x5c\x05\x30\x8c\x80\x10\x2a\x39\xb9\x6c\x49\x5a\xe3\x0b\xd6\xe3\x03\x53\x49\xf3\x13\x6a\x87\x55\x2f\xed\x25\x5d\x59\x02\x0e\xd5\x3c\xe1\x8a\xd0\x19\x4e\x98\x40\xac\x37\x4f\x06\x01\xa6\x17\x90\x00\x6d\x1a\x9c\x27\x84\x6b\x62\x71\x3e\xf6\xc7\x2d\x83\xeb\xe9\x5a\xab\xa1\xb5\x47\x55\x3d\xd3\x95\x37\x8d\x92\x25\x0f\x03\x47\xf6\xff\xeb\xbd\x80\xb6\x11\x9c\x50\x2c\x42\x83\xf7\xad\x54\xe2\x03\x27\x4c\xaf\xac\xd3\x9c\x20\x99\x66\xd9\xf9\x59\x36\x39\xcb\xa6\x37\x93\x59\x9e\xbd\xc9\xb3\xd9\x8f\xec\x6d\x9e\xc5\x95\x17\x6c\x47\x0e\x85\x78\x4b\xb5\x75\xe1\x5f\x80\xc2\x70\xbd\x5f\xc1\xa0\xa5\x60\xf1\x30\x40\xd9\x01\x5b\xf8\x76\x19\xa5\x8f\xfc\x49\x8e\x98\x20\x3d\x70\xb8\xe3\xf7\x48\x84\x0e\x6c\x05\x5c\x29\xa0\x1a\xa1\x51\xbc\x44\x9f\x16\x6c\x57\xa5\x6f\x0f\x61\xdd\x8e\x9b\x3b\x84\x53\xf9\x0a\x4e\x25\x41\x3e\x87\xf4\x9a\x50\xfb\x10\x80\xf8\x37\x20\x0b\x34\xe4\x36\x83\xec\x17\xc4\xed\x74\xbf\x86\xf0\x43\x52\xfa\x99\x6b\xbc\xb4\xba\x71\xe8\x3d\x0a\xe8\xba\xbf\x87\x8b\xaf\x35\x9f\xce\xce\x1f\x5c\xc5\x8c\xfe\xd5\xf7\x8a\x9b\x3f\x0e\xc5\x0b\xa3\xf0\xbc\x88\x47\xb1\x64\xc3\x88\xbd\x4d\x23\x5a\x94\x35\x32\xaf\x68\xda\xa5\x92\xbe\xee\x33\x11\x50\x1f\xb9\xa7\x4f\x56\xc8\x4a\x0e\x43\x1c\x10\x3d\x63\x94\xa1\x1d\xfe\x5b\x3c\x3a\x0e\x09\x40\x51\x5a\x43\x68\xe8\xc1\xba\x6f\x6a\xe9\x1f\xbc\x4a\x08\x28\x2e\x8d\x87\xa1\xe4\xa5\x6d\x0d\xc1\x2f\xa8\x5b\xcd\x8d\xbc\xc7\xdb\xd2\x6a\xcd\xc3\x2e\x8f\xa2\xe2\xb0\xb4\x4e\x78\xe0\x46\x84\xd8\xec\x56\x21\xef\xc7\xf6\x8c\xea\x2c\x37\x84\x31\x13\xe5\xe1\x3a\x70\x47\xc4\x47\xf0\xae\x83\xd6\x1c\xf0\x29\x5c\x13\xac\xb8\x87\xd2\x61\x18\x14\x9e\xb6\x2d\x96\xfd\x37\xa4\x56\x70\xe2\x20\x29\xbc\xdb\xff\x22\x51\x71\x4f\x30\xd8\x04\xd6\xc0\x53\x3e\xa6\x05\x1b\xac\xeb\x9f\xd0\x3e\xb6\xdb\x2d\xa0\x11\xf1\x0b\xcc\xc2\x27\x78\x71\x38\xf8\x1d\x00\x00\xff\xff\x5d\xcb\x4e\x4f\xaf\x05\x00\x00")

func templatesFeedAtom_10XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedAtom_10Xml,
		"templates/feed/atom_1.0.xml",
	)
}

func templatesFeedAtom_10Xml() (*asset, error) {
	bytes, err := templatesFeedAtom_10XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/atom_1.0.xml", size: 1455, mode: os.FileMode(436), modTime: time.Unix(1534172353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFeedRss_20Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x4f\xdb\x30\x14\x7d\x1e\xbf\xe2\x28\x43\xda\x26\xa1\x38\x74\x03\x89\xca\xf4\x61\x4c\x48\x4c\x63\x7b\x80\x69\x8f\xc8\xc4\xb7\x8d\xb5\xc4\xae\x7c\x6f\x56\x20\xcb\x7f\x9f\x9c\x96\x36\xb0\x49\xec\xad\xee\x3d\x1f\xce\xb9\xc7\x5d\x07\x4b\x73\xe7\x09\xd9\x9c\xc8\xde\x44\xe6\x9b\x49\x91\xa1\xef\xf7\x74\x64\xc6\x5d\x53\x7b\x9e\x56\xa7\x59\x25\xb2\x9c\x2a\xb5\x5a\xad\xf2\xd5\xfb\x3c\xc4\x85\x3a\x3c\x39\x39\x51\x77\x95\x34\x75\x86\x5f\x14\xd9\x05\x7f\x9a\x4d\xf2\x22\x9b\xed\x01\xba\xac\x8c\xf7\x54\xa7\xdf\x80\x16\x27\x35\xcd\x7e\x54\xe1\x0d\xe3\x9b\xc7\xb9\x8b\x2c\xe8\x3a\xe4\xd7\xf7\x4b\x42\xdf\xc3\x3a\x96\xe8\x6e\x5b\x71\xc1\xb3\x56\x6b\xfc\x9a\x5b\x3b\xff\x73\x96\xec\x79\xaa\x54\xc2\xe5\xab\x2a\x70\xf0\xf3\x24\x32\xdc\x64\x24\xa4\xb4\x1a\xf0\x1b\xaa\x61\xf9\xd8\xba\xda\x7e\x32\x42\xb3\x04\xdb\x9e\xf2\xf3\x10\x1b\x23\xc8\x2e\x83\x3f\x40\x31\xc1\x67\xe3\x31\x29\x8a\x63\x1c\x1e\x4d\x8b\x0f\xd3\xe2\x08\x97\x57\xd7\x29\x08\xad\x9e\xca\xac\xa5\x2d\x71\x19\xdd\x32\xdd\xf7\xf9\x77\x39\x86\xc1\xc2\x3c\x90\x08\x51\x44\x98\xc3\xd4\x35\xa4\x22\x2c\x6b\x53\x12\xe7\x5a\x8d\xd9\x83\x1e\x52\x1a\xd1\xf8\x05\x61\xdf\x1d\x60\xdf\x09\xa6\xa7\xc8\x2f\x84\x1a\x4e\xf9\x00\xd8\xe0\xb4\x13\x6a\x1e\x49\x7a\xd1\x3a\xfb\x62\x38\xfb\xdb\x74\xd2\xc1\x49\xfe\xd5\x34\x74\x16\x9a\x65\x24\x66\xb2\xe8\xfb\xd7\x9b\xc1\x55\x65\x26\x47\xc7\x4f\x46\x5a\x0d\x1e\x6b\xbf\x57\x8f\xbe\xff\xb5\x94\x97\x7d\xc7\xdb\xda\xd6\x64\x04\x1e\x20\xa3\x32\x3c\x0b\xfe\xba\x72\xfc\xa4\x3a\x28\x83\x17\xe3\x3c\x63\x23\x72\x16\x5a\x2f\xf8\x8d\xaa\x6d\x8c\x77\x0f\x74\x53\x86\xa6\x31\x29\xd1\x67\x4b\x8b\x54\x86\x68\x19\xc6\xdb\xb4\xc0\xc7\x3c\xdc\xc3\xf8\xc2\x23\x9d\xdb\x7b\xa1\x61\x33\xe5\x6e\x9c\xb8\x23\xe2\x5f\xf0\xbe\x47\xeb\x77\xf8\x1c\x17\x82\x95\x61\x94\x91\x8c\xd0\x96\xfb\xc5\xb0\x5c\x06\xeb\xe6\x6e\xc8\x68\x90\x7d\x9b\xea\x63\x8d\x18\x38\x61\xaa\xe7\xef\x06\x62\x2a\x26\xda\xa5\x1d\xd8\xc1\x8f\x05\xbe\x0f\xff\xa2\xef\xff\xd5\x36\xad\x76\x25\xea\x3a\x90\x4f\x3e\xe9\xd5\xaa\xed\xb3\xd5\x2a\x32\xcf\x76\xc3\x3f\x01\x00\x00\xff\xff\x3a\x0d\x82\xc3\x29\x04\x00\x00")

func templatesFeedRss_20XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedRss_20Xml,
		"templates/feed/rss_2.0.xml",
	)
}

func templatesFeedRss_20Xml() (*asset, error) {
	bytes, err := templatesFeedRss_20XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/rss_2.0.xml", size: 1065, mode: os.FileMode(436), modTime: time.Unix(1534172340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/feed/atom_1.0.xml": templatesFeedAtom_10Xml,
	"templates/feed/rss_2.0.xml": templatesFeedRss_20Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"feed": &bintree{nil, map[string]*bintree{
			"atom_1.0.xml": &bintree{templatesFeedAtom_10Xml, map[string]*bintree{}},
			"rss_2.0.xml": &bintree{templatesFeedRss_20Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

