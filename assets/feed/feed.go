// Code generated by go-bindata.
// sources:
// templates/feed/atom_1.0.xml
// templates/feed/rss_2.0.xml
// DO NOT EDIT!

package feed

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFeedAtom_10Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xef\x6f\xd3\x30\x10\xfd\xcc\xfe\x8a\x93\x99\x04\x08\x16\xa7\x85\x0e\x56\x25\x9d\x60\x68\xd2\x24\x7e\x7c\xa0\x13\x12\x5f\x26\x37\xb9\x34\x16\x8e\x1d\xd9\x17\xda\xae\xf4\x7f\x47\x76\xd2\x36\xeb\x26\x6d\xa2\x9f\x5a\xfb\xbd\xbb\x77\xf7\x9e\xbb\x5e\x43\x8e\x85\xd4\x08\xac\x40\xcc\x6f\x04\x99\xea\x66\x10\x33\xd8\x6c\x92\xf3\x65\xa5\xe0\x0f\x5a\x27\x8d\x4e\xd9\x20\x8a\x19\xa0\xce\x4c\x2e\xf5\x3c\x65\xd7\xd3\xcb\x93\x0f\xec\x7c\x72\x94\x78\x1e\x2c\x2b\xa5\x5d\xca\x4a\xa2\x7a\xcc\xf9\x62\xb1\x88\x16\x6f\x23\x63\xe7\x7c\x18\xc7\x23\xfe\x91\x4c\xc5\x5a\xcc\xb8\x7c\x08\x35\x38\x3b\x3b\xe3\xcb\x92\x2a\xc5\x26\x47\x00\x89\xcc\x27\x1e\xe4\xc6\x9c\xe7\xd2\x51\xb4\x28\x8d\x33\xba\x90\xd6\x51\xc0\xaf\xd7\x10\x4d\x57\x35\x7a\x99\x5c\xe6\x81\x43\x92\x14\x4e\x7e\x96\xe6\x85\x83\xef\x05\x5c\x7a\x30\xf4\x80\xe0\x2b\x59\x39\x6b\x48\x1a\xed\x12\xde\xe2\x3d\x53\x49\xfd\x1b\x4a\x8b\x45\x2b\xed\x29\x5d\x39\x03\x8b\x2a\x65\x42\x11\x5a\x2d\x08\x19\x84\x7a\x29\xeb\x04\xe8\x56\x00\x03\x5a\xd5\x98\x32\xc2\x25\xf1\x30\x1f\xff\xef\x96\xde\x9b\x68\x59\xa9\xae\xb5\x43\x55\x3c\xd2\x55\xd4\xb5\x92\x99\xf0\x03\x07\xf6\xeb\xe5\x4e\x40\x53\xe7\x82\x30\x9f\xf8\x06\x9f\x1a\xa9\xf2\xcf\x82\x30\xba\x34\xb6\x12\x04\x6c\x18\xc7\xa7\x27\xf1\xe0\x24\x1e\x4e\x07\xa3\x71\xfc\x6e\x1c\x8f\x7e\xc5\xef\xc7\x71\x1b\x0c\xbe\x25\xfb\x42\xa2\xa1\xd2\x58\xff\x15\x20\xd1\xa2\xda\x59\xd0\x69\x49\x78\x38\xf4\x50\xbe\xc7\x26\xae\x99\x05\xe9\xbd\xfd\xb0\x03\x26\x48\x07\x02\xe6\xe2\x16\x89\xd0\x82\x29\x40\x28\x05\x54\x22\xd4\x4a\x64\xe8\xa2\x84\x6f\xab\xb4\xed\xc1\xdb\x6d\x85\x9e\x23\x1c\xcb\x37\x70\x2c\x09\xc6\x29\x44\x57\x84\x95\xf3\x01\x08\x9f\x0e\x99\xa0\x26\xbb\xea\x64\x3f\x21\x6e\xc7\x3b\x1b\xfc\x0f\x49\xd1\x37\x51\xe1\x85\xa9\x6a\x8b\xce\x61\x0e\x9b\xcd\xf3\xee\xe2\x47\x29\x86\xa3\xd3\x3b\x57\x21\xa3\xcf\xda\x5e\xc1\xf9\xc3\x50\x3c\x31\x0a\x8f\x8b\xb8\x17\x4b\xde\x8d\xd8\xae\xa9\x47\x0b\xb2\x7a\xcb\x4b\xea\x66\xa6\xa4\x2b\xdb\x4c\x78\xd4\x17\xe1\xe8\xab\xc9\x65\x21\xbb\x21\xf6\x88\x96\xd1\xcb\xd0\x16\x7f\x1d\x8e\x0e\x43\x02\x90\x64\x46\x13\x6a\xba\x63\xf7\xb4\x94\xee\xce\xab\x04\x8f\x12\x52\x3b\xe8\x4a\x5e\x98\x46\x13\xfc\x85\xb2\xa9\x84\x96\xb7\x78\x93\x99\xaa\x12\xde\xcb\x83\xa8\x58\xcc\x8c\xcd\x1d\x08\x9d\xfb\xd8\x6c\xad\x90\xb7\xfd\xf5\xf4\xea\xcc\x56\x84\x21\x13\xd9\xfe\xda\x73\x7b\xc4\x7b\xf0\xcd\x06\x1a\xbd\xc7\x47\x70\x45\xb0\x10\x0e\x32\x8b\x7e\x50\x78\x78\x6d\xa1\xec\x4b\x9f\xda\x5c\x90\x00\x49\xfe\xdd\xbe\x0a\x44\x25\x1c\x41\xb7\x26\x30\x1a\x1e\xda\x63\x94\xf0\x6e\x75\xed\x13\xda\xc5\x76\xbd\x06\xd4\xbe\xc1\x51\xc2\xfd\x5f\xf0\x64\x7f\xf0\x2f\x00\x00\xff\xff\xd8\x03\xdb\xc3\xd5\x05\x00\x00")

func templatesFeedAtom_10XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedAtom_10Xml,
		"templates/feed/atom_1.0.xml",
	)
}

func templatesFeedAtom_10Xml() (*asset, error) {
	bytes, err := templatesFeedAtom_10XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/atom_1.0.xml", size: 1493, mode: os.FileMode(436), modTime: time.Unix(1534171703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFeedRss_20Xml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5f\x4f\xdb\x3e\x14\x7d\xfe\xf1\x29\x8e\xf2\x43\xda\x26\xb1\x38\x74\x03\x8d\x2a\x2d\xd2\x98\x90\x98\xc6\xf6\x40\xd1\x1e\x91\x89\x6f\x1b\x6b\x89\x5d\xf9\xde\xac\x40\x96\xef\x3e\x39\x2d\x6d\x60\x93\xd8\x5b\xdd\x7b\xfe\x38\xe7\x1e\xb7\x2d\x0c\xcd\xad\x23\x24\x73\x22\x73\x13\x98\x6f\x46\x59\x82\xae\xcb\x4f\xef\xea\x0a\x3f\x29\xb0\xf5\x6e\x92\x1c\xa6\x59\x02\x72\x85\x37\xd6\x2d\x26\xc9\xf5\xec\xfc\xed\x87\xe4\x74\xba\x97\x07\x66\xdc\xd5\x95\xe3\x71\x39\x49\x4a\x91\xe5\x58\xa9\xd5\x6a\x95\xae\xde\xa5\x3e\x2c\xd4\xe1\xc9\xc9\x89\xba\x2b\xa5\xae\x92\x9d\xd8\x28\xcd\x92\xe9\x1e\x90\x17\xa5\x76\x8e\xaa\xf8\x1b\xc8\xc5\x4a\x45\xd3\xef\xa5\x7f\xc5\xf8\xe6\x70\x6e\x03\x0b\xda\x16\xe9\xec\x7e\x49\xe8\x3a\x18\xcb\x12\xec\x6d\x23\xd6\x3b\xce\xd5\x1a\xbf\xe6\x56\xd6\xfd\x98\x46\x7b\x1e\x2b\x15\x71\xe9\xaa\xf4\xec\xdd\x3c\x8a\xf4\x37\x19\x08\xa9\x5c\xf5\xf8\x0d\x55\xb3\x7c\x6c\x6c\x65\x3e\x69\xa1\x69\x84\x6d\x4f\xe9\xb9\x0f\xb5\x16\x24\x97\xde\x1d\x20\x1b\xe1\xb3\x76\x18\x65\xd9\x31\x0e\x8f\xc6\xd9\xfb\x71\x76\x84\xcb\xab\x59\x1f\x97\x7a\x2a\xb3\x96\x36\xc4\x45\xb0\xcb\x78\xdf\xe7\xdf\x65\x19\x1a\x0b\xfd\x40\x22\x44\x01\x7e\x0e\x5d\x55\x90\x92\xb0\xac\x74\x41\x9c\xe6\x6a\xc8\xee\xf5\x10\xd3\x08\xda\x2d\x08\xfb\xf6\x00\xfb\x56\x30\x9e\x20\xbd\x10\xaa\x39\xe6\x03\x60\x83\xcb\xad\x50\xfd\x48\xca\x17\x8d\x35\x2f\x86\xb3\xbf\x4d\x27\x1e\xac\xa4\x5f\x75\x4d\x67\xbe\x5e\x06\x62\x26\x83\xae\xfb\x7f\x33\xb8\x2a\xf5\xe8\xe8\xf8\xc9\x28\x57\xbd\xc7\xda\xef\xbf\x47\xdf\x7f\x5a\xca\xcb\xbe\xc3\x6d\x6d\x6b\x32\x00\xf7\x90\x41\x19\x9e\x05\x3f\x2b\x2d\x3f\xa9\x0e\x0a\xef\x44\x5b\xc7\xd8\x88\x9c\xf9\xc6\x09\x7e\xa1\x6c\x6a\xed\xec\x03\xdd\x14\xbe\xae\x75\x4c\xf4\xd9\xd2\x02\x15\x3e\x18\x86\x76\x26\x2e\xf0\x31\x0f\xfb\x30\xbc\xf0\x40\xe7\xf6\x5e\xa8\xdf\x4c\xb1\x1b\x47\xee\x80\xf8\x07\xbc\xeb\xd0\xb8\x1d\x3e\xc5\x85\x60\xa5\x19\x45\x20\x2d\xb4\xe5\x7e\xd1\x2c\x97\xde\xd8\xb9\xed\x33\xea\x65\x5f\xc7\xfa\x18\x2d\x1a\x56\x98\xaa\xf9\x9b\x9e\x18\x8b\x89\x66\x69\x7a\xb6\x77\x43\x81\xeb\xfe\x5f\x74\xdd\xdf\xda\x96\xab\x5d\x89\xda\x16\xe4\xa2\x4f\x7c\xb5\x6a\xfb\x6c\x73\x15\x98\xa7\xbb\xe1\xef\x00\x00\x00\xff\xff\xfd\x40\x42\x35\x4f\x04\x00\x00")

func templatesFeedRss_20XmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFeedRss_20Xml,
		"templates/feed/rss_2.0.xml",
	)
}

func templatesFeedRss_20Xml() (*asset, error) {
	bytes, err := templatesFeedRss_20XmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/feed/rss_2.0.xml", size: 1103, mode: os.FileMode(436), modTime: time.Unix(1534171716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/feed/atom_1.0.xml": templatesFeedAtom_10Xml,
	"templates/feed/rss_2.0.xml": templatesFeedRss_20Xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"feed": &bintree{nil, map[string]*bintree{
			"atom_1.0.xml": &bintree{templatesFeedAtom_10Xml, map[string]*bintree{}},
			"rss_2.0.xml": &bintree{templatesFeedRss_20Xml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

